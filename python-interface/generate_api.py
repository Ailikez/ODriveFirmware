import json

class Mapping():
    def __init__(self,name,type,nr,access,min,max):
        self.name = name
        self.type = type
        self.nr = nr
        self.access = access
        self.min = min
        self.max = max
        if self.name.find(".") == -1:
            self.scope = "global"
        elif self.name.find("motors[") == 0:
            if self.name.find(".rotor.") != -1:
                self.scope = "rotor"
            elif self.name.find(".current_control.") != -1:
                self.scope = "current_control"
            else:
                self.scope = "motor"
        else:
            print("Unknown scope for %s, fix generator code!" % self.name)
      
content = open("../MotorControl/low_level.c","r").read()

exposed_types = ["exposed_floats","exposed_ints","exposed_bools"]

mappings = []

for typenr in range(0,len(exposed_types)):
    parts = content.split(" * %s [] = {" %  exposed_types[typenr])
    pointernames = parts[1].split("};")[0].split("\n")    
    pointernames = [p.strip().replace("&","") for p in pointernames if p.strip()!=""]
    for i in range(0,len(pointernames)):
        pointername = pointernames[i].split(",")[0]
        access = pointernames[i].split("//")[1].strip()
        varnr = ("%s"%i).zfill(3)
        print "%s %s - %s" % (typenr, varnr,pointername)
        mappings.append(Mapping(pointername,typenr,i,access,0,1))


f=open("generated/MappingAutoGenerated.py","w")
f.write('''
# this file was created by generated_mapping.py, don't change it manually! 
class Mapping():
    def __init__(self,name,type,nr,access,min,max):
        self.name = name
        self.type = type
        self.nr = nr
        self.access = access
        self.min = min
        self.max = max \n        
''')
f.write('''variable_map = {\n''')
for m in mappings:
    f.write('''    "%s" : Mapping("%s",%s,%s,"%s",%s,%s),\n''' % (m.name, m.name, m.type, m.nr, m.access, m.min, m.max) )
f.write('''}\n''')
f.close()


template_get_monitor = '''
    def get_%(functionName)s(self):
        mapping = variable_map[%(mappingKey)s]
        return self._get(mapping.type,mapping.nr)

    def monitor_%(functionName)s(self,frequency):
        mapping = variable_map[%(mappingKey)s]
        self._monitor(mapping.type,mapping.nr,frequency)
'''
template_set = '''
    def set_%(functionName)s(self,value):
        mapping = variable_map[%(mappingKey)s]
        if type == 2:
            value = 0 if value == False else 1
        self._set(mapping.type,mapping.nr,value)
'''


f = open("generated/ODriveAutoGenerated.py","w")
f.write("from MappingAutoGenerated import variable_map\n")
f.write('class ODriveAutoGenerated():\n')
for mapping in [m for m in mappings if m.scope == "global"]:
    mappingKey = '"%s"' % mapping.name 
    functionName = mapping.name.replace(".","_")
    f.write("\n        # %s %s %s %s" % (mapping.name,mapping.type,mapping.nr,mapping.access))
    f.write( template_get_monitor %  { "functionName" : functionName, "mappingKey" : mappingKey })
    if mapping.access == "rw":
        f.write( template_set %  { "functionName" : functionName, "mappingKey" : mappingKey })
f.close()


# ... copypastaparty

f = open("generated/MotorAutoGenerated.py","w")
f.write("from MappingAutoGenerated import variable_map\n")
f.write('class MotorAutoGenerated():\n')
for mapping in [m for m in mappings if m.scope == "motor"]:
    mappingKey = '"motors[%%s].%s" %% self.nr' % mapping.name.split(".",1)[1] 
    functionName = mapping.name.split(".",1)[1].replace(".","_")
    f.write("\n        # %s %s %s %s" % (mapping.name,mapping.type,mapping.nr,mapping.access))
    f.write(template_get_monitor %  { "functionName" : functionName, "mappingKey" : mappingKey })
    if mapping.access == "rw":
        f.write(template_set %  { "functionName" :functionName, "mappingKey" : mappingKey })
f.close()


f = open("generated/RotorAutoGenerated.py","w")
f.write("from MappingAutoGenerated import variable_map\n")
f.write('class RotorAutoGenerated():\n')
for mapping in [m for m in mappings if m.scope == "rotor"]:
    mappingKey = '"motors[%%s].rotor.%s" %% self.motor.nr' % mapping.name.split(".",2)[2] 
    functionName = mapping.name.split(".",2)[2].replace(".","_")
    f.write("\n        # %s %s %s %s" % (mapping.name,mapping.type,mapping.nr,mapping.access))
    f.write(template_get_monitor %  { "functionName" : functionName, "mappingKey" : mappingKey})
    if mapping.access == "rw":
        f.write(template_set %  { "functionName" : functionName, "mappingKey" : mappingKey})
f.close()


f = open("generated/CurrentControlAutoGenerated.py","w")
f.write("from MappingAutoGenerated import variable_map\n")
f.write('class CurrentControlAutoGenerated():\n')
for mapping in [m for m in mappings if m.scope == "current_control"]:
    mappingKey = '"motors[%%s].current_control.%s" %% self.motor.nr' % mapping.name.split(".",2)[2] 
    functionName = mapping.name.split(".",2)[2].replace(".","_")
    f.write("\n        # %s %s %s %s" % (mapping.name,mapping.type,mapping.nr,mapping.access))
    f.write(template_get_monitor %  { "functionName" :  functionName, "mappingKey" : mappingKey})
    if mapping.access == "rw":
        f.write(template_set %  { "functionName" :  functionName, "mappingKey" : mappingKey})
f.close()








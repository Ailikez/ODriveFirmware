import json
content = open("../MotorControl/low_level.c","r").read()

exposed_types = ["exposed_floats","exposed_ints","exposed_bools"]

exposed_vars = {}

for typenr in range(0,len(exposed_types)):
	parts = content.split(" * %s [] = {" %  exposed_types[typenr])
	pointernames = parts[1].split("};")[0].split("\n")	
	pointernames = [p.strip().replace("&","") for p in pointernames if p.strip()!=""]
	for i in range(0,len(pointernames)):
		pointername = pointernames[i].split(",")[0]
		access = pointernames[i].split("//")[1].strip()
        	varnr = ("%s"%i).zfill(3)
        	print "%s %s - %s" % (typenr, varnr,pointername)
		exposed_vars[pointername] = (typenr, varnr,access)


#print exposed_vars 

f=open("generated/MappingAutoGenerated.py","w")
f.write('''
# this file was created by generated_mapping.py, don't change it manually! 
variable_map = %s
''' % json.dumps(exposed_vars))

global_keys = [(k, exposed_vars[k]) for k in exposed_vars.keys() if k.find(".") == -1]
func_template_global = '''
	def get_%(FunctionName)s(self):
		type,id,access = variable_map["%(OdriveVarname)s"]
		return helper.castType(type,self.command("g %%s %%s" %% (type,id)))

	def monitor_%(FunctionName)s(self,slot):
		type,id,access = variable_map["%(OdriveVarname)s"]
		self.command("m %%s %%s %%s" %% (type,id,slot))
'''
func_template_global_set = '''
	def set_%(FunctionName)s(self,value):
		type,id,access = variable_map["%(OdriveVarname)s"]
		if type == 2:
			value = 0 if value == False else 1
		self.command("s %%s %%s %%s" %% (type,id,value))
'''
f = open("generated/ODriveAutoGenerated.py","w")
f.write("from MappingAutoGenerated import variable_map\n")
f.write("import helper\n")
f.write('class ODriveAutoGenerated():\n')

for key,data in global_keys:
	f.write("\n        # %s %s %s %s" % (key,data[0],data[1],data[2] ))
	f.write( func_template_global %  { "FunctionName" : key.replace(".","_"), "OdriveVarname" : key })
	if data[2] == "rw":
		f.write( func_template_global_set %  { "FunctionName" : key.replace(".","_"), "OdriveVarname" : key })
		
f.close()


motor_keys = list(set([(k.split(".",1)[1], exposed_vars[k]) for k in exposed_vars.keys() if k.find("motors[") == 0 and k.find(".rotor.") == -1 and k.find(".current_control.") == -1]))
func_template_motor = '''
	def get_%(FunctionName)s(self):
		type,id,access = variable_map["motors[%%s].%(OdriveVarname)s" %% self.nr]
		return helper.castType(type,self.odrive.command("g %%s %%s" %% (type,id)))

	def monitor_%(FunctionName)s(self,slot):
		type,id,access = variable_map["motors[%%s].%(OdriveVarname)s" %% self.nr]
		self.odrive.command("m %%s %%s %%s" %% (type,id,slot))
'''
func_template_motor_set = '''
	def set_%(FunctionName)s(self,value):
		type,id,access = variable_map["motors[%%s].%(OdriveVarname)s" %% self.nr]
		if type == 2:
			value = 0 if value == False else 1
		self.odrive.command("s %%s %%s %%s" %% (type,id,value))
'''
f = open("generated/MotorAutoGenerated.py","w")
f.write("from MappingAutoGenerated import variable_map\n")
f.write("import helper\n")
f.write('class MotorAutoGenerated():\n')
for key,data in motor_keys:
	f.write("\n        # %s %s %s %s" % (key,data[0],data[1],data[2] ))
	f.write(func_template_motor %  { "FunctionName" : key.replace(".","_"), "OdriveVarname" : key })
	if data[2] == "rw":
		f.write(func_template_motor_set %  { "FunctionName" : key.replace(".","_"), "OdriveVarname" : key })
	
f.close()


rotor_keys = list(set([(k.split(".",2)[2], exposed_vars[k]) for k in exposed_vars.keys() if k.find("motors[") == 0 and k.find(".rotor.") != -1]))
func_template_rotor = '''
	def get_%(FunctionName)s(self):
		type,id,access =variable_map["motors[%%s].rotor.%(OdriveVarname)s" %% self.motor.nr]
		return helper.castType(type,self.motor.odrive.command("g %%s %%s" %% (type,id)))

	def monitor_%(FunctionName)s(self,slot):
		type,id,access =variable_map["motors[%%s].rotor.%(OdriveVarname)s" %% self.motor.nr]
		self.motor.odrive.command("m %%s %%s %%s" %% (type,id,slot))
'''
func_template_rotor_set = '''
	def set_%(FunctionName)s(self,value):
		type,id,access =variable_map["motors[%%s].rotor.%(OdriveVarname)s" %% self.motor.nr]
		if type == 2:
			value = 0 if value == False else 1
		self.motor.odrive.command("s %%s %%s %%s" %% (type,id,value))
'''
f = open("generated/RotorAutoGenerated.py","w")
f.write("from MappingAutoGenerated import variable_map\n")
f.write("import helper\n")
f.write('class RotorAutoGenerated():\n')
for key,data in rotor_keys:
	f.write("\n        # %s %s %s %s" % (key,data[0],data[1],data[2] ))
	f.write(func_template_rotor %  { "FunctionName" : key.replace(".","_"), "OdriveVarname" : key})
	if data[2] == "rw":
		f.write(func_template_rotor_set %  { "FunctionName" : key.replace(".","_"), "OdriveVarname" : key})

f.close()



currents_keys = list(set([(k.split(".",2)[2],exposed_vars[k]) for k in exposed_vars.keys() if k.find("motors[") == 0 and k.find(".current_control.") != -1]))
func_template_current = '''
	def get_%(FunctionName)s(self):
		type,id,access = variable_map["motors[%%s].current_control.%(OdriveVarname)s" %% self.motor.nr]
		return helper.castType(type,self.motor.odrive.command("g %%s %%s" %% (type,id)))

	def monitor_%(FunctionName)s(self,slot):
		type,id,access = variable_map["motors[%%s].current_control.%(OdriveVarname)s" %% self.motor.nr]
		self.motor.odrive.command("m %%s %%s %%s" %% (type,id,slot))
'''
func_template_current_set = '''
	def set_%(FunctionName)s(self,value):
		type,id,access = variable_map["motors[%%s].current_control.%(OdriveVarname)s" %% self.motor.nr]
		if type == 2:
			value = 0 if value == False else 1
		self.motor.odrive.command("s %%s %%s %%s" %% (type,id,value))
'''

f = open("generated/CurrentControlAutoGenerated.py","w")
f.write("from MappingAutoGenerated import variable_map\n")
f.write("import helper\n")
f.write('class CurrentControlAutoGenerated():\n')
for key,data in currents_keys:
	f.write("\n        # %s %s %s %s" % (key,data[0],data[1],data[2] ))
	f.write(func_template_current %  { "FunctionName" : key.replace(".","_"), "OdriveVarname" : key})
	if data[2] == "rw":
		f.write(func_template_current_set %  { "FunctionName" : key.replace(".","_"), "OdriveVarname" : key})

f.close()







